// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ############# Next auth #############
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ############# Business logic #############

model Event {
    id String @id @default(cuid())

    name String
    date DateTime
    url  String

    phase         EventPhase @default(PRE)
    isCurrent     Boolean    @default(false)
    currentDemoId String?

    demos     Demo[]
    attendees Attendee[]
    awards    Award[]
}

enum EventPhase {
    PRE
    DEMO
    VOTING
    RESULTS
}

model Demo {
    id      String @id @default(cuid())
    event   Event  @relation(fields: [eventId], references: [id])
    eventId String
    index   Int

    name  String
    email String
    url   String

    feedback Feedback[]
    votes    Vote[]
    awards   Award[]
}

model Attendee {
    id      String @id @default(cuid())
    event   Event  @relation(fields: [eventId], references: [id])
    eventId String

    name  String?
    email String?
    type  String?

    feedback Feedback[]
    votes    Vote[]
}

model Award {
    id       String  @id @default(cuid())
    event    Event   @relation(fields: [eventId], references: [id])
    eventId  String
    index    Int
    winner   Demo?   @relation(fields: [winnerId], references: [id])
    winnerId String?

    name String

    votes Vote[]
}

model Feedback {
    id         String   @id @default(cuid())
    attendee   Attendee @relation(fields: [attendeeId], references: [id])
    attendeeId String
    demo       Demo     @relation(fields: [demoId], references: [id])
    demoId     String

    rating       Int?
    claps        Int     @default(0)
    star         Boolean @default(false)
    wantToAccess Boolean @default(false)
    wantToInvest Boolean @default(false)
    wantToWork   Boolean @default(false)
    comment      String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Vote {
    id         String   @id @default(cuid())
    attendee   Attendee @relation(fields: [attendeeId], references: [id])
    attendeeId String
    award      Award    @relation(fields: [awardId], references: [id])
    awardId    String
    demo       Demo?    @relation(fields: [demoId], references: [id])
    demoId     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
