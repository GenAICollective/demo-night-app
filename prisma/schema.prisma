// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

// ############# Next auth #############

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ############# Business logic #############

model Event {
  id String @id @default(cuid())

  name     String
  date     DateTime
  url      String
  partners Json[]
  secret   String   @default(cuid())

  submissions   Submission[]
  demos         Demo[]
  attendees     Attendee[]
  awards        Award[]
  feedback      Feedback[]
  votes         Vote[]
  eventFeedback EventFeedback[]
}

enum SubmissionStatus {
  PENDING
  WAITLISTED
  AWAITING_CONFIRMATION
  CONFIRMED
  CANCELLED
  REJECTED
}

model Submission {
  id      String @id @default(cuid())
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  name        String
  tagline     String
  description String
  email       String
  url         String
  pocName     String
  demoUrl     String?

  status  SubmissionStatus @default(PENDING)
  flagged Boolean          @default(false)
  rating  Int?
  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, email])
}

model Demo {
  id      String @id @default(cuid())
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  index   Int
  secret  String @default(cuid())

  name        String
  description String
  email       String
  url         String

  feedback Feedback[]
  votes    Vote[]
  awards   Award[]
}

model Attendee {
  id     String  @id @default(cuid())
  events Event[]

  name     String?
  email    String?
  linkedin String?
  type     String?

  feedback      Feedback[]
  votes         Vote[]
  eventFeedback EventFeedback[]
}

model Award {
  id       String  @id @default(cuid())
  event    Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String
  index    Int
  winner   Demo?   @relation(fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId String?

  name        String
  description String
  votable     Boolean @default(true)

  votes Vote[]
}

model Feedback {
  id         String   @id @default(cuid())
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId String
  demo       Demo     @relation(fields: [demoId], references: [id], onDelete: Cascade)
  demoId     String

  rating       Int?
  claps        Int      @default(0)
  tellMeMore   Boolean  @default(false)
  quickActions String[] @default([])
  comment      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, attendeeId, demoId])
  @@index([eventId, attendeeId])
}

model Vote {
  id         String   @id @default(cuid())
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId String
  award      Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
  awardId    String
  demo       Demo?    @relation(fields: [demoId], references: [id], onDelete: Cascade)
  demoId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, attendeeId, awardId])
  @@index(awardId)
}

// ############# Event Feedback #############

model EventFeedback {
  id         String   @id @default(cuid())
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId String

  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, attendeeId])
}
